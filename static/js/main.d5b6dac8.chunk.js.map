{"version":3,"sources":["constants.js","utils/commonFunctions.js","serviceWorker.js","i18n/index.js","index.js"],"names":["API_ROOT_URL","LOCALE_SHORTHANDS","english","hindi","telugu","kannada","gujarati","marathi","tamil","bengali","punjabi","malayalam","odiya","PRIMARY_STATISTICS","TABLE_STATISTICS","DISTRICT_TABLE_COUNT","TIMESERIES_STATISTICS","D3_TRANSITION_DURATION","MINIGRAPH_LOOKBACK_DAYS","UNASSIGNED_STATE_CODE","UNKNOWN_DISTRICT_KEY","INDIA_ISO_SUFFIX","COLORS","confirmed","active","recovered","deceased","tested","SPRING_CONFIG_NUMBERS","clamp","precision","TIMESERIES_CHART_TYPES","total","delta","TIMESERIES_LOOKBACKS","BEGINNING","MONTH","TWO_WEEKS","MAP_VIZS","CHOROPLETH","BUBBLES","MAP_VIEWS","STATES","DISTRICTS","MAP_TYPES","COUNTRY","STATE","MAPS_DIR","MAP_META","AP","geoDataFile","mapType","AR","AS","BR","CT","name","GA","GJ","HR","HP","JK","JH","KA","KL","MP","MH","MN","ML","MZ","NL","OR","PB","RJ","SK","TN","TG","TR","UT","UP","WB","AN","CH","DN","DL","LA","LD","PY","TT","MAP_LEGEND_HEIGHT","STATE_NAMES","stateCodes","stateCodesMap","Object","keys","map","key","index","push","code","STATE_CODES","STATE_CODES_ARRAY","locale","isDevelopmentOrTest","getIndiaDate","utcToZonedTime","Date","getIndiaDateISO","formatISO","representation","getIndiaYesterdayISO","subDays","formatLastUpdated","unformattedDate","then","localePackage","i18n","language","window","localStorage","i18nextLng","formatDistance","parseIndiaDate","isoDate","formatDate","formatString","match","date","format","abbreviateNumber","number","toFixed","formatNumber","value","mode","isNaN","numberFormatter","Intl","NumberFormat","maximumFractionDigits","capitalize","s","charAt","toUpperCase","slice","capitalizeAll","str","toLowerCase","split","i","length","join","getStatistic","data","type","statistic","count","perMillion","migrated","meta","population","fetcher","url","fetch","response","json","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","use","Backend","LanguageDetector","initReactI18next","init","debug","keySeparator","returnEmptyString","fallbackLng","load","backend","loadPath","addPath","saveMissing","interpolation","escapeValue","App","lazy","rootElement","document","getElementById","main","render","fallback","requestIdleCallback","IntersectionObserver","src","done","js","createElement","onload","onerror","Error","head","appendChild","loadScript","URL","process","href","origin","addEventListener","setTimeout","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d5b6dac8.chunk.js","sourcesContent":["export const API_ROOT_URL = 'https://api.covid19india.org/v4/min';\n\nexport const LOCALE_SHORTHANDS = {\n  english: 'en-US',\n  hindi: 'hi',\n  telugu: 'te',\n  kannada: 'en-US',\n  gujarati: 'gu',\n  marathi: 'en-US',\n  tamil: 'ta',\n  bengali: 'bn',\n  punjabi: 'en-US',\n  malayalam: 'en-US',\n  odiya: 'en-US',\n};\n\nexport const PRIMARY_STATISTICS = [\n  'confirmed',\n  'active',\n  'recovered',\n  'deceased',\n];\n\nexport const TABLE_STATISTICS = [...PRIMARY_STATISTICS, 'tested'];\n\nexport const DISTRICT_TABLE_COUNT = 30;\n\nexport const TIMESERIES_STATISTICS = [...PRIMARY_STATISTICS, 'tested'];\n\nexport const D3_TRANSITION_DURATION = 300;\n\nexport const MINIGRAPH_LOOKBACK_DAYS = 20;\n\nexport const UNASSIGNED_STATE_CODE = 'UN';\n\nexport const UNKNOWN_DISTRICT_KEY = 'Unknown';\n\nexport const INDIA_ISO_SUFFIX = 'T00:00:00+05:30';\n\nexport const COLORS = {\n  confirmed: '#ff073a',\n  active: '#007bff',\n  recovered: '#28a745',\n  deceased: '#6c757d',\n  tested: '#4b1eaa',\n};\n\nexport const SPRING_CONFIG_NUMBERS = {clamp: true, precision: 1};\n\nexport const TIMESERIES_CHART_TYPES = {\n  total: 'Cumulative',\n  delta: 'Daily',\n};\n\nexport const TIMESERIES_LOOKBACKS = {\n  BEGINNING: 'Beginning',\n  MONTH: '1 Month',\n  TWO_WEEKS: '2 Weeks',\n};\n\nexport const MAP_VIZS = {\n  CHOROPLETH: 0,\n  BUBBLES: 1,\n};\n\nexport const MAP_VIEWS = {\n  STATES: 0,\n  DISTRICTS: 1,\n};\n\nexport const MAP_TYPES = {\n  COUNTRY: 0,\n  STATE: 1,\n};\n\nexport const MAPS_DIR =\n  process.env.NODE_ENV === 'production' ? '/mini_maps' : '/projected_maps';\n\nexport const MAP_META = {\n  AP: {\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  AR: {\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  AS: {\n    geoDataFile: `${MAPS_DIR}/assam.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  BR: {\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  CT: {\n    name: 'Chhattisgarh',\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  GA: {\n    geoDataFile: `${MAPS_DIR}/goa.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  GJ: {\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  HR: {\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  HP: {\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  JK: {\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  JH: {\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  KA: {\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  KL: {\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  MP: {\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  MH: {\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  MN: {\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  ML: {\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  MZ: {\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  NL: {\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  OR: {\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  PB: {\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  RJ: {\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  SK: {\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TN: {\n    geoDataFile: `${MAPS_DIR}/tamilnadu.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TG: {\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TR: {\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  UT: {\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  UP: {\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  WB: {\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  AN: {\n    name: 'Andaman and Nicobar Islands',\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  CH: {\n    geoDataFile: `${MAPS_DIR}/chandigarh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  DN: {\n    geoDataFile: `${MAPS_DIR}/dnh-and-dd.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  DL: {\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  LA: {\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  LD: {\n    geoDataFile: `${MAPS_DIR}/lakshadweep.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  PY: {\n    geoDataFile: `${MAPS_DIR}/puducherry.json`,\n    mapType: MAP_TYPES.STATE,\n  },\n  TT: {\n    geoDataFile: `${MAPS_DIR}/india.json`,\n    mapType: MAP_TYPES.COUNTRY,\n  },\n};\n\nexport const MAP_LEGEND_HEIGHT = 50;\n\nexport const STATE_NAMES = {\n  AP: 'Andhra Pradesh',\n  AR: 'Arunachal Pradesh',\n  AS: 'Assam',\n  BR: 'Bihar',\n  CT: 'Chhattisgarh',\n  GA: 'Goa',\n  GJ: 'Gujarat',\n  HR: 'Haryana',\n  HP: 'Himachal Pradesh',\n  JH: 'Jharkhand',\n  KA: 'Karnataka',\n  KL: 'Kerala',\n  MP: 'Madhya Pradesh',\n  MH: 'Maharashtra',\n  MN: 'Manipur',\n  ML: 'Meghalaya',\n  MZ: 'Mizoram',\n  NL: 'Nagaland',\n  OR: 'Odisha',\n  PB: 'Punjab',\n  RJ: 'Rajasthan',\n  SK: 'Sikkim',\n  TN: 'Tamil Nadu',\n  TG: 'Telangana',\n  TR: 'Tripura',\n  UT: 'Uttarakhand',\n  UP: 'Uttar Pradesh',\n  WB: 'West Bengal',\n  AN: 'Andaman and Nicobar Islands',\n  CH: 'Chandigarh',\n  DN: 'Dadra and Nagar Haveli and Daman and Diu',\n  DL: 'Delhi',\n  JK: 'Jammu and Kashmir',\n  LA: 'Ladakh',\n  LD: 'Lakshadweep',\n  PY: 'Puducherry',\n  TT: 'India',\n  [UNASSIGNED_STATE_CODE]: 'Unassigned',\n};\n\nconst stateCodes = [];\nconst stateCodesMap = {};\nObject.keys(STATE_NAMES).map((key, index) => {\n  stateCodesMap[STATE_NAMES[key]] = key;\n  stateCodes.push({code: key, name: STATE_NAMES[key]});\n  return null;\n});\nexport const STATE_CODES = stateCodesMap;\nexport const STATE_CODES_ARRAY = stateCodes;\n","import {INDIA_ISO_SUFFIX, LOCALE_SHORTHANDS} from '../constants';\n\nimport {format, formatDistance, formatISO, subDays} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport i18n from 'i18next';\n\nlet locale = null;\n\nconst getLocale = () => {\n  import('date-fns/locale/').then((localePackage) => {\n    locale =\n      localePackage[\n        LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]\n      ];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\n    return true;\n  return false;\n};\n\nexport const getIndiaDate = () => {\n  return utcToZonedTime(new Date(), 'Asia/Kolkata');\n};\n\nexport const getIndiaDateISO = () => {\n  return formatISO(getIndiaDate(), {representation: 'date'});\n};\n\nexport const getIndiaYesterdayISO = () => {\n  return formatISO(subDays(getIndiaDate(), 1), {representation: 'date'});\n};\n\nexport const formatLastUpdated = (unformattedDate) => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale,\n  });\n};\n\nexport const parseIndiaDate = (isoDate) => {\n  return utcToZonedTime(new Date(isoDate + INDIA_ISO_SUFFIX), 'Asia/Kolkata');\n};\n\nexport const formatDate = (unformattedDate, formatString) => {\n  if (\n    typeof unformattedDate === 'string' &&\n    unformattedDate.match(/^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$/g)\n  )\n    unformattedDate += INDIA_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n  return format(date, formatString, {\n    locale: locale,\n  });\n};\n\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\n\nexport const abbreviateNumber = (number) => {\n  if (number < 1e3) return number;\n  if (number >= 1e3 && number < 1e6) return +(number / 1e3).toFixed(1) + 'K';\n  if (number >= 1e6 && number < 1e9) return +(number / 1e6).toFixed(1) + 'M';\n  if (number >= 1e9 && number < 1e12) return +(number / 1e9).toFixed(1) + 'B';\n  if (number >= 1e12) return +(number / 1e12).toFixed(1) + 'T';\n};\n\nexport const formatNumber = (value, mode = 'long') => {\n  if (isNaN(value)) return '-';\n\n  const numberFormatter = new Intl.NumberFormat('en-IN', {\n    maximumFractionDigits: 2,\n  });\n\n  if (mode === 'short') {\n    return abbreviateNumber(value);\n  }\n\n  return numberFormatter.format(value);\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const capitalizeAll = (s) => {\n  if (typeof s !== 'string') return '';\n  const str = s.toLowerCase().split(' ');\n  for (let i = 0; i < str.length; i++) {\n    str[i] = capitalize(str[i]);\n  }\n  return str.join(' ');\n};\n\nexport const abbreviate = (s) => {\n  return s.slice(0, 1) + s.slice(1).replace(/[aeiou]/gi, '');\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const getStatistic = (data, type, statistic, perMillion = false) => {\n  let count;\n  if (statistic === 'active') {\n    const confirmed = data?.[type]?.confirmed || 0;\n    const deceased = data?.[type]?.deceased || 0;\n    const recovered = data?.[type]?.recovered || 0;\n    const migrated = data?.[type]?.migrated || 0;\n    count = confirmed - deceased - recovered - migrated;\n  } else {\n    count = data?.[type]?.[statistic] || 0;\n  }\n  return perMillion ? (1e6 * count) / data?.meta?.population || 0 : count;\n};\n\nexport const fetcher = (url) => {\n  return fetch(url).then((response) => {\n    return response.json();\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () =>\n      setTimeout(() => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      }, 3000)\n    );\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {isDevelopmentOrTest} from '../utils/commonFunctions';\n\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport {initReactI18next} from 'react-i18next';\n\nconst DEBUG = false;\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    debug: isDevelopmentOrTest() && DEBUG,\n    keySeparator: false,\n    returnEmptyString: false,\n    fallbackLng: 'english',\n    load: 'languageOnly',\n    backend: {\n      loadPath: 'https://api.covid19india.org/locales/locale_{{lng}}.json',\n      addPath: 'http://localhost:9999/',\n    },\n    saveMissing: isDevelopmentOrTest() && DEBUG,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","// import './wdyr';\nimport * as serviceWorker from './serviceWorker';\nimport './i18n';\n\nimport React, {Suspense, lazy} from 'react';\nimport {render} from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nconst App = lazy(() => import('./App'));\nconst rootElement = document.getElementById('root');\n\nconst main = () =>\n  render(\n    <Suspense fallback={<div />}>\n      <Router>\n        <App />\n      </Router>\n    </Suspense>,\n    rootElement\n  );\n\nconst browserSupportsAllFeatures = () => {\n  return window.requestIdleCallback && window.IntersectionObserver;\n};\n\nconst loadScript = (src, done) => {\n  const js = document.createElement('script');\n  js.src = src;\n  js.onload = function () {\n    done();\n  };\n  js.onerror = function () {\n    done(new Error('Failed to load script ' + src));\n  };\n  document.head.appendChild(js);\n};\n\nif (browserSupportsAllFeatures()) {\n  main();\n} else {\n  loadScript(\n    'https://polyfill.io/v3/polyfill.min.js?version=3.52.1&features=requestIdleCallback%2CIntersectionObserver',\n    main\n  );\n}\n\nserviceWorker.register();\n"],"sourceRoot":""}