{"version":3,"sources":["components/Tooltip.js","components/Cell.js","components/DistrictRow.js","components/Row.js"],"names":["Tooltip","data","children","useState","isTooltipVisible","setIsTooltipVisible","transitions","useTransition","from","TOOLTIP_FADE_OUT","enter","TOOLTIP_FADE_IN","leave","config","mass","tension","friction","className","style","position","onMouseEnter","bind","onMouseLeave","map","item","key","props","div","dangerouslySetInnerHTML","__html","replace","React","memo","statistic","isPerMillion","total","getStatistic","NaN","delta","spring","useSpring","SPRING_CONFIG_NUMBERS","classnames","interpolate","formatNumber","Math","floor","abs","prevProps","currProps","equal","stateCode","districtName","regionHighlighted","setRegionHighlighted","t","useTranslation","highlightDistrict","useCallback","produce","draftRegionHighlighted","meta","notes","size","TABLE_STATISTICS","showDistricts","setShowDistricts","useSessionStorage","sortColumn","isAscending","sortData","setSortData","history","useHistory","rowElement","useRef","handleSortClick","draftSortData","sortingFunction","districtNameA","districtNameB","statisticA","districts","statisticB","localeCompare","highlightState","_setShowDistrict","districtNameStr","UNKNOWN_DISTRICT_KEY","STATE_NAMES","handleStatePageClick","push","handleCollapse","current","scrollIntoView","block","Fragment","onClick","ref","capitalize","formatLastUpdated","last_updated","this","state","invert","HeaderCell","handleSort","Object","keys","sort","a","b"],"mappings":"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","file":"static/js/28.6b7a4fb2.chunk.js","sourcesContent":["import {TOOLTIP_FADE_IN, TOOLTIP_FADE_OUT} from '../animations';\n\nimport React, {useState} from 'react';\nimport {useTransition, animated} from 'react-spring';\n\nconst Tooltip = ({data, children}) => {\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n\n  const transitions = useTransition(isTooltipVisible, null, {\n    from: TOOLTIP_FADE_OUT,\n    enter: TOOLTIP_FADE_IN,\n    leave: TOOLTIP_FADE_OUT,\n    config: {\n      mass: 1,\n      tension: 210,\n      friction: 20,\n    },\n  });\n\n  return (\n    <span\n      className=\"Tooltip\"\n      style={{position: 'relative'}}\n      onMouseEnter={setIsTooltipVisible.bind(this, true)}\n      onMouseLeave={setIsTooltipVisible.bind(this, false)}\n    >\n      {children}\n\n      {transitions.map(({item, key, props}) =>\n        item ? (\n          <animated.div key={key} style={props}>\n            <div className=\"message\">\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: data.replace(/\\n/g, '<br/>'),\n                }}\n              ></p>\n            </div>\n          </animated.div>\n        ) : (\n          <animated.div key={key}></animated.div>\n        )\n      )}\n    </span>\n  );\n};\n\nexport default Tooltip;\n","import {SPRING_CONFIG_NUMBERS} from '../constants.js';\nimport {formatNumber, getStatistic} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, isPerMillion}) => {\n  let total = getStatistic(data, 'total', statistic, isPerMillion);\n  // TODO: Maybe move inside getStatistic\n  if (!total && statistic === 'tested') {\n    total = NaN;\n  }\n  const delta = getStatistic(data, 'delta', statistic, isPerMillion);\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  return (\n    <div className=\"cell statistic\">\n      {statistic !== 'active' && (\n        <animated.div className={classnames('delta', `is-${statistic}`)}>\n          {spring.delta.interpolate((delta) =>\n            delta > 0\n              ? '\\u2191' +\n                formatNumber(\n                  Math.floor(delta),\n                  statistic === 'tested' ? 'short' : null\n                )\n              : delta < 0\n              ? '\\u2193' +\n                formatNumber(\n                  Math.floor(Math.abs(delta)),\n                  statistic === 'tested' ? 'short' : null\n                )\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\">\n        {spring.total.interpolate((total) =>\n          formatNumber(\n            Math.floor(total),\n            statistic === 'tested' ? 'short' : null\n          )\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  }\n  if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  }\n  if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Cell, isCellEqual);\n","import Cell from './Cell';\nimport Tooltip from './Tooltip';\n\nimport {TABLE_STATISTICS} from '../constants';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useCallback} from 'react';\nimport {Info} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction DistrictRow({\n  stateCode,\n  districtName,\n  data,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n}) {\n  const {t} = useTranslation();\n\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        })\n      );\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n\n  return (\n    <div\n      className={classnames('row', 'district', {\n        'is-highlighted': regionHighlighted?.districtName === districtName,\n      })}\n      onMouseEnter={highlightDistrict}\n    >\n      <div className=\"cell\">\n        <div className=\"state-name\">{t(districtName)}</div>\n        {data?.meta?.notes && (\n          <Tooltip {...{data: data.meta.notes}}>\n            <Info size={16} />\n          </Tooltip>\n        )}\n      </div>\n\n      {TABLE_STATISTICS.map((statistic) => (\n        <Cell key={statistic} {...{statistic, data, isPerMillion}} />\n      ))}\n    </div>\n  );\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.['last_updated'], currProps.data?.['last_updated'])\n  ) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n    (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) ||\n      equal(currProps.regionHighlighted.districtName, currProps.districtName))\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(DistrictRow, isDistrictRowEqual);\n","import Cell from './Cell';\nimport DistrictRow from './DistrictRow';\nimport HeaderCell from './HeaderCell';\nimport Tooltip from './Tooltip';\n\nimport {\n  TABLE_STATISTICS,\n  STATE_NAMES,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {\n  capitalize,\n  formatLastUpdated,\n  getStatistic,\n} from '../utils/commonFunctions';\n\nimport {\n  ClockIcon,\n  GraphIcon,\n  FilterIcon,\n  FoldUpIcon,\n  AlertIcon,\n} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useState, useCallback, useRef} from 'react';\nimport {Info} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\n\nfunction Row({\n  data,\n  stateCode,\n  districtName,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n}) {\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useSessionStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const rowElement = useRef();\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      setSortData(\n        produce(sortData, (draftSortData) => {\n          draftSortData.isAscending = !sortData.isAscending;\n          draftSortData.sortColumn = statistic;\n        })\n      );\n    },\n    [sortData, setSortData]\n  );\n\n  const sortingFunction = useCallback(\n    (districtNameA, districtNameB) => {\n      if (sortData.sortColumn !== 'districtName') {\n        const statisticA = getStatistic(\n          data.districts[districtNameA],\n          sortData.delta ? 'delta' : 'total',\n          sortData.sortColumn,\n          isPerMillion\n        );\n        const statisticB = getStatistic(\n          data.districts[districtNameB],\n          sortData.delta ? 'delta' : 'total',\n          sortData.sortColumn,\n          isPerMillion\n        );\n        return sortData.isAscending\n          ? statisticA - statisticB\n          : statisticB - statisticA;\n      } else {\n        return sortData.isAscending\n          ? districtNameA.localeCompare(districtNameB)\n          : districtNameB.localeCompare(districtNameA);\n      }\n    },\n    [sortData, data, isPerMillion]\n  );\n\n  const highlightState = useCallback(() => {\n    if (stateCode) {\n      if (regionHighlighted.stateCode !== stateCode) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = stateCode;\n            draftRegionHighlighted.districtName = null;\n          })\n        );\n      }\n    } else if (districtName) {\n      if (\n        regionHighlighted.districtName !== districtName ||\n        regionHighlighted.stateCode !== data.stateCode\n      ) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = data.stateCode;\n            draftRegionHighlighted.districtName = districtName;\n          })\n        );\n      }\n    }\n  }, [\n    data.stateCode,\n    districtName,\n    regionHighlighted,\n    setRegionHighlighted,\n    stateCode,\n  ]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  let districtNameStr = districtName;\n  if (districtName === UNKNOWN_DISTRICT_KEY) {\n    districtNameStr = `${t(UNKNOWN_DISTRICT_KEY)} [${t(\n      STATE_NAMES[data.stateCode]\n    )}]`;\n  }\n\n  const handleStatePageClick = useCallback(\n    (stateCode) => {\n      history.push(`state/${stateCode}`);\n    },\n    [history]\n  );\n\n  const handleCollapse = useCallback(() => {\n    setShowDistricts(false);\n    rowElement.current.scrollIntoView({\n      block: 'start',\n    });\n\n    // eslint-disable-next-line\n    const faux = stateCode;\n  }, [stateCode]);\n\n  return (\n    <React.Fragment>\n      <div\n        className={classnames(\n          'row',\n          {'is-total': stateCode === 'TT'},\n          {\n            'is-highlighted':\n              (stateCode && regionHighlighted?.stateCode === stateCode) ||\n              (districtName &&\n                regionHighlighted?.districtName === districtName &&\n                regionHighlighted?.stateCode === data.stateCode),\n          }\n        )}\n        onMouseEnter={highlightState}\n        onClick={_setShowDistrict}\n        ref={rowElement}\n      >\n        <div className=\"cell\">\n          <div className=\"state-name fadeInUp\">\n            {t(STATE_NAMES[stateCode]) || districtNameStr}\n          </div>\n          {data?.meta?.notes && (\n            <Tooltip {...{data: data.meta.notes}}>\n              <Info size={16} />\n            </Tooltip>\n          )}\n        </div>\n\n        {TABLE_STATISTICS.map((statistic) => (\n          <Cell key={statistic} {...{data, statistic, isPerMillion}} />\n        ))}\n      </div>\n\n      {showDistricts && (\n        <React.Fragment>\n          <div className=\"state-meta\">\n            <div className=\"state-meta-top\">\n              {data?.meta?.['last_updated'] && (\n                <p className=\"last-updated\">\n                  <ClockIcon />\n                  {capitalize(\n                    `${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`\n                  )}\n                </p>\n              )}\n              <div\n                className=\"state-page\"\n                onClick={handleStatePageClick.bind(this, stateCode)}\n              >\n                <GraphIcon />\n                <span>\n                  {t('See more details on {{state}}', {\n                    state: stateCode,\n                  })}\n                </span>\n              </div>\n            </div>\n\n            {UNKNOWN_DISTRICT_KEY in data.districts && (\n              <div className=\"state-meta-bottom\">\n                <div className={classnames('disclaimer')}>\n                  <AlertIcon />\n                  <span>\n                    {t('District-wise data not available in state bulletin')}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className={classnames('row', 'heading')}>\n            <div\n              className=\"cell heading\"\n              onClick={handleSortClick.bind(this, 'districtName')}\n            >\n              <div className=\"district-name\">{t('District')}</div>\n              {sortData.sortColumn === 'districtName' && (\n                <div\n                  className={classnames('sort-icon', {\n                    invert: !sortData.isAscending,\n                  })}\n                >\n                  <FilterIcon size={10} />\n                </div>\n              )}\n            </div>\n\n            {TABLE_STATISTICS.map((statistic) => (\n              <HeaderCell\n                key={statistic}\n                {...{statistic, sortData, setSortData}}\n                handleSort={handleSortClick.bind(this, statistic)}\n              />\n            ))}\n          </div>\n        </React.Fragment>\n      )}\n\n      {showDistricts &&\n        Object.keys(data.districts)\n          .sort((a, b) => sortingFunction(a, b))\n          .map((districtName) => (\n            <DistrictRow\n              key={districtName}\n              {...{\n                districtName,\n                regionHighlighted,\n                setRegionHighlighted,\n                stateCode,\n                isPerMillion,\n              }}\n              data={data.districts[districtName]}\n            />\n          ))}\n\n      {showDistricts && (\n        <div className=\"spacer\">\n          <p>{`End of ${t(STATE_NAMES[stateCode])}'s districts`}</p>\n          <div className=\"fold\" onClick={handleCollapse}>\n            <FoldUpIcon />\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.stateCode,\n      currProps.regionHighlighted.stateCode\n    ) &&\n      equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode)) ||\n    equal(currProps.regionHighlighted.stateCode, currProps.stateCode)\n  ) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n      equal(\n        prevProps.regionHighlighted.districtName,\n        prevProps.districtName\n      )) ||\n    equal(currProps.regionHighlighted.districtName, currProps.districtName)\n  ) {\n    return false;\n  } else return true;\n};\n\nexport default React.memo(Row, isEqual);\n"],"sourceRoot":""}